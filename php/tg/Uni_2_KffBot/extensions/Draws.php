<?php
require_once __DIR__."/../UniConstruct.trait.php";
require_once __DIR__."/../Helper.class.php";

class Draws extends Helper implements DrawsInt
{
	use UniConstruct;

	const
		FOLDER = __DIR__.'/../Game_2',
		BASE = self::FOLDER . '/base.json';

	protected
		$draws;

	private
		$drawsOwner,
		$addSelf,
		$toAllParticipants;

	/**
	 * @param cmd - 'cmdName_opt1_opt2_...etc'
	 */
	public function __construct(UniKffBot &$UKB, ?string $cmd=null)
	{
		$this->setConstruct($UKB, $cmd)->init()->routerCmd()->saveCurData();

	} //* __construct


	private function init()
	{
		// $this->log->add('$this->BTNS=',null,[$this->BTNS]);

		$this->getCurData();

		$this->drawsOwner = isset($this->data['current draws']['owner'])
		&& $this->chat_id === $this->data['current draws']['owner']['id'];

		$this->data['change'] = 0;

		// $this->log->add(__METHOD__.' $this->data=',null,$this->data);

		return $this;
	} //* init


	protected function routerCmd($cmd=null)
	{
		$o = parent::routerCmd($cmd);

		$draws = &$this->data['current draws'];
		// $pumps = &$this->data['pumps'];

		if(!$o) switch ($cmd ?? $this->cmd[0]) {
			//*** –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ***
			case 'new draw':
				if(!empty($draws))
				{
					$o = $this->showMainMenu([
						'text' => '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à, –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—ã–≥—Ä–∞–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º!'
					]);
				break;
				}

				$o = [
					'text' => '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.',
					'reply_markup' => [
						"inline_keyboard" => [
							[
								['text' => 1, 'callback_data' => '/Draws/prizes_count__1'],
								['text' => 2, 'callback_data' => '/Draws/prizes_count__2'],
								['text' => 3, 'callback_data' => '/Draws/prizes_count__3'],
							],
				],],];

				$this->UKB->setStatement([
					'drawsOwner'=>1
				]);
				break;

			case 'prizes_count':

				$this->log->add('prizes_count',null, [$this->drawsOwner]);

				if( !$this->drawsOwner && !$this->statement['drawsOwner'] )
				{
					$o = $this->showMainMenu([
						'text'=> '–ú–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–æ–Ω—Å–æ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞!',
					]);
					break;
				}

				$this->data['change']++;
				$draws = [
					'owner' => $this->cbn['from'],
					'prizes_count' => $this->cmd[1][0],
				];

				$o = $this->showMainMenu([
					'text'=> '–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω.',
				]);

				$this->addSelf = 1;

				$this->sendToAll("–°–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç <b>{$this->cbn['from']['first_name']} @{$this->cbn['from']['username']}</b>. –°–ø–µ—à–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!");
				break;

			case 'show participants':
				$o = $this->showParticipants();
				$o['text'] .= "\n<a href='{$this->urlDIR}/assets/Zorro_300.png' title='ZorroClan'>&#8205;</a>";
				break;

			//* –†–æ–∑—ã–≥—Ä—ã—à
			case 'play draw':
				$this->statement = $this->UKB->setStatement([
					'drawsOwner'=>0
				]);

				if(!count($draws['participants']))
				{
					$o = $this->showMainMenu([
						'text' => "–ö–æ–≥–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å —Å–æ–±–∏—Ä–∞–µ–º—Å—è, —Ç–æ–≤–∞–≥–∏—Å—á?\n\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!",
					]);
					break;
				}

				shuffle($draws['participants']);
				$winners = []; $winStr = '';

				for($i=0; $i < $draws['prizes_count']; $i++)
				{
					if(empty($draws['participants'][$i]))
						break;

					$winners[] = $draws['participants'][$i];
					$winStr .= $this->showUsername($winners[$i]);
				}

				$o = $this->showMainMenu([
					'text' => "<u>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</u>\n\n$winStr\n<a href='{$this->urlDIR}/assets/roullete.jpg' title='ZorroClan'>&#8205;</a>",
				]);
				/* $o = [
				//* –ß–∞—Ç –∏–ª–∏ –±–æ—Ç?
				'text' => "<u>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</u>\n\n$winStr\n<a href='{$this->urlDIR}/assets/roullete.jpg' title='ZorroClan'>&#8205;</a>",
				'reply_markup' => [
					"keyboard" => [[
						['text' => self::CMD['Draws']['new draw']],
					],],
				]; */

				$o = array_merge_recursive($this->showParticipants(), $o);

				$this->toAllParticipants = 1;
				break;

			//* –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
			case 'participate':
				$count = count($draws['participants']);

				if(in_array($this->cbn['from'], $draws['participants']))
				{
					$o = $this->showMainMenu([
						'text' => "–¢—ã —É–∂–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à. –ö–æ–Ω—á–∞–π —Å–µ—Ä–≤–µ—Ä –º—É—á–∞—Ç—å, –∞ —Ç–æ - –∑–∞–±–∞–Ω—é –Ω–∞—Ö!\n\n–ê –≤–æ–æ–±—â–µ —É–∂–µ $count —á–µ–ª. –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ."
					]);
					break;
				}
				elseif(
					!empty($owner = $draws['owner'])
				) {
					$this->data['change']++;
					$draws['participants'][]= $this->cbn['from'];
					$count++;

					$o = [
						'text' => "–£—á–∞—Å—Ç–Ω–∏–∫ " . $this->showUsername($this->cbn['from']) . " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç {$owner['first_name']}.\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {$count} —á–µ–ª."
					];
					$this->sendToOwner = 1;
				}
				else $o = $this->showMainMenu([
					'text' => '–î–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç.',
				]);
				break;

			default:
				$draw= [
					'text' => isset($draws['owner'])
					? "–°–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç {$draws['owner']['first_name']}. –°–ø–µ—à–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!"
					: "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π."
				];

				$o = $this->showMainMenu($draw);
				break;
		} //*switch


		//* –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
		if($o)
		{
			//* add keyboard options
			if(!empty($o['reply_markup']['keyboard']))
			{
				//* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
				if(isset($this->data['current draws']) && $this->statement['drawsOwner'])
				{
					$keyboard = [
						['text' => $this->BTNS['play draw']],
						['text' => $this->BTNS['show participants']],
					];
				}
				elseif(isset($this->data['current draws']) && !$this->drawsOwner)
					$keyboard = [['text' => self::CMD['Draws']['participate']]];
				else
					$keyboard = [['text' => self::CMD['Draws']['new draw']]];

				$o['reply_markup'] += ["one_time_keyboard" => false, "resize_keyboard" => true, "selective" => true];

				$o['reply_markup']['keyboard'] = array_merge_recursive($o['reply_markup']['keyboard'], [$keyboard]);
			}

			//* –°–∫–ª–µ–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
			if(is_array($o['text']))
			{
				$o['text'] = implode("\n\n", $o['text']);
			}

			//* Send
			if(!empty($this->toAllParticipants))
			{
				$this->toAllParticipants = null;
				foreach($draws['participants'] as $p)
				{
					$o['chat_id'] = $p['id'];
					$this->apiRequest($o);
				}

				unset($draws, $this->data['current draws']);
				$this->data['change']++;
			}
			else $this->apiRequest($o);

			//* –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
			if(!empty($this->addSelf))
			{
				$this->addSelf = null;
				return $this->routerCmd('participate');
			}

			//* –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
			if(!empty($this->sendToOwner) && !$this->statement['drawsOwner'])
			{
				$this->sendToOwner = null;
				$o['chat_id'] = $draws['owner']['id'];
				$this->apiRequest($o);
			}
		}

		return $this;
	} //* routerCmd üí°


	private function showParticipants()
	:array
	{
		$draws = &$this->data['current draws'];
		$ps = '';
		foreach($draws['participants'] as $p)
		{
			$ps .= $this->showUsername($p);
		}
		return [
			'text' => "<u>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:</u> " . count($draws['participants']) . " —á–µ–ª.\n\n$ps\n<a href='{$this->urlDIR}/assets/Zorro_300.png' title='ZorroClan'>&#8205;</a>"
		];
	}

} //* Draws
