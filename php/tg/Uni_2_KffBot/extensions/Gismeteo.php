<?php

class Gismeteo extends CommonBot implements Game
{
	use UniConstruct;

	const
		FOLDER = __DIR__.'/../base_GM',
		LIM_HOURS = 1;

	private
		$base = __DIR__.'/../base_GM';


	/**
	 * @param cmd - 'cmdName__opt1__opt2__...etc'
	 */
	public function __construct(UniKffBot &$UKB, ?array $cmd=null)
	{
		$this->setConstruct($UKB, $cmd)->_init();

	} //* __construct


	private function _init()
	{
		//* –õ–æ–∫–∞—Ü–∏—è. –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
		if(empty($this->getLocation()->location))
		{
			tolog('$this->location is EMPTY!', E_USER_WARNING, ['$this->location'=>$this->location]);

			//* –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
			$this->userPermission();
			die;
		}

		//* –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		switch ($this->cmd[0]) {
			case 'changeLocation':
				$this->userPermission("–ü–æ–º–µ–Ω—è–π—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.\n\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Å—Ä–∞–∑—É, –∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –ø—Ä–µ–∂–Ω–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
				break;
			case 'forecast_aggregate':
				$this->requestGM('aggregate')
					->methodSwitcher();
				break;
			case 'by_day_part':
				$this->requestGM('by_day_part')->methodSwitcher();
				break;

			case 'Gismeteo':
			case 'gismeteo':
				$this->requestGM('current')->responseGMHandler();
				$forecastButs = [[]];
				for ($i=3; $i <= 5; $i++) {
					$forecastButs[0][]= [
						"text" => "$i " . ($i===5 ? '–¥–Ω–µ–π' : '–¥–Ω—è'),
						"callback_data" => "/gismeteo/forecast_aggregate__$i"
					];
				}

				$forecastButs []= [[
					"text" => "–°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
					"callback_data" => "/gismeteo/changeLocation"
				]];

				//* –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
				$this->apiRequest(array_merge([
					'chat_id' => $this->user_id,
					'title' => "–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
					'reply_markup' => [
						"inline_keyboard" => $forecastButs,
						"one_time_keyboard" => true,
						"resize_keyboard" => true,
						"selective" => true
					]
				], $this->location), 'sendVenue');
				break;
		}

	} //* _init

	private function getLocation()
	:object
	{
		//* read base
		$this->locations = json_decode(
			@file_get_contents("{$this->base}/locations.json"), true
		) ?? [];

		//* –ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è
		if(!empty($this->location = @$this->message['location']))
		{
			$this->setLocation();
		}
		else
		{
			$this->location = $this->locations[$this->user_id][0] ?? null;
		}
		return $this;
	}

	private function setLocation()
	{
		$this->locations[$this->user_id] = [
			"0" => $this->location
		];

		file_put_contents("{$this->base}/locations.json", json_encode($this->locations, JSON_UNESCAPED_UNICODE|JSON_NUMERIC_CHECK|JSON_UNESCAPED_SLASHES));
	}

	/**
	 *
	 */
	private function userPermission($text=null)
	{
		$text = $text ?? "–£—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é?\n–ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–≥–æ–¥—É.";

		$pf = [
			'chat_id' => $this->user_id,
			'text' => $text,
			'reply_markup' => [
				"keyboard" => [
					[[
						"text" => "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
						"request_location" => true
					]],
					[['text' => self::BTNS['general']],]
				],
				"one_time_keyboard" => true,
				"resize_keyboard" => true,
				"selective" => true
			]
		];

		$this->apiResponseJSON($pf);
	}


	private function requestGM($method = 'current')
	:object
	{
		//* –ò–º—è —Ñ–∞–π–ª–∞ —Å –∫–µ—à–µ–º
		$cacheFilename = "{$this->base}/{$this->user_id}.{$method}_" . implode('_', $this->cmd[1]) . ".json";
		if(!file_exists($this->base))
			mkdir($this->base, 0664);

		$params = $this->location;
		switch ($method) {
			//* –ü—Ä–æ–≥–Ω–æ–∑ —Å —à–∞–≥–æ–º 6 —á–∞—Å–æ–≤
			case 'by_day_part':
			//* –ü—Ä–æ–≥–Ω–æ–∑ —Å —à–∞–≥–æ–º 24 —á–∞—Å–∞
			case 'aggregate':
				$params['days'] = $this->cmd[1][0];
				$urlAPI = "https://api.gismeteo.net/v2/weather/forecast/{$method}/";
				break;

			default:
				//* current
				$urlAPI = "https://api.gismeteo.net/v2/weather/{$method}/";
				break;
		}

		if(
			file_exists($cacheFilename)
			&& (time() - filemtime($cacheFilename) < self::LIM_HOURS * 3600)
			&& $this->cmd[0] !== 'setLocation'
		)
		{
			$this->responseData = json_decode(
				file_get_contents($cacheFilename), 1
			);
		}
		//* If old or not exist
		else
		{
			$this->responseData = $this->CurlRequest($urlAPI, [
				'sendMethod' => 'get',
				'headers' => ["X-Gismeteo-Token: {$this->tokens['gismeteo']}", "Accept-Encoding: deflate, gzip"],
				'params' => $params
			]);

			if($respJSON = json_encode($this->responseData, JSON_UNESCAPED_UNICODE|JSON_NUMERIC_CHECK|JSON_UNESCAPED_SLASHES))
				file_put_contents($cacheFilename, $respJSON, LOCK_EX);
		}

		// tolog(__METHOD__ . '$this->responseData = ', null, [$this->responseData]);

		return $this;
	} //* requestGM


	private function methodSwitcher()
	{
		$data = &$this->responseData['response'];
		if(!empty($data[0]))
		{
			foreach($data as $tod)
			{
				$this->responseGMHandler($tod);
			}
		}
		else
			$this->responseGMHandler($data);
	}

	//* –°–æ–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫–∏
	private function collectIcons($icon)
	{
		$picts = [
			'day' => [
				'c0' => '‚òÄ',
				'c1' => '‚õÖ',
				'c2' => '‚õÖ',
				'c3' => '‚òÅ',
				'r1' => '&#127782;',
				'r2' => '&#127783;‚òî',
				'r3' => '‚òî&#127783;‚òî',
				'st' => '‚õà‚òî',
				's1' => '&#127784;',
				's2' => '&#127784;‚ùÑ',
				's3' => '‚ùÑ&#127784;‚ùÑ',

			],
			'night' => [
				'c0' => 'üåô',
				'c1' => '‚òÅ',
				'c2' => '‚òÅ',
				'r1' => '&#127783;',
			],
		];

		$icon = preg_replace('/(.*)rs(\d)(.*)/', '$1r$2_s$2$3', $icon);
		$arr = explode('_',$icon);
		$day = $arr[0] !== 'n';
		$out = '';

		if(!preg_match('/_?c\d/', $icon)) $arr[]= 'c0';

		foreach($arr as &$i)
		{
			if(preg_match('/^\w+\d/', $i, $r))
			{
				if($day) $out.= $picts[$day?'day':'night'][$i] ?? $picts['day'][$i] ?? '';
			}
		}

		return $out;
	} //* collectIcons($data['icon'])


	private function collectWeather(&$data)
	{
		$wind = ['—à—Ç–∏–ª—å','–°–µ–≤–µ—Ä–Ω—ã–π','–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π','–í–æ—Å—Ç–æ—á–Ω—ã–π','–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π','–Æ–∂–Ω—ã–π',' 	–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π','–ó–∞–ø–∞–¥–Ω—ã–π','–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',];

		$precipitation = [
			'intensity' => ['–Ω–µ—Ç','—Å–ª–∞–±—ã–π','—É–º–µ—Ä–µ–Ω–Ω—ã–π','—Å–∏–ª—å–Ω—ã–π'],
			'type' => ['','–¥–æ–∂–¥—å','—Å–Ω–µ–≥','—Å–Ω–µ–≥ —Å –¥–æ–∂–¥—ë–º'],
		];

		$gm = ['–ù–µ—Ç','–ù–µ–±–æ–ª—å—à–∏–µ','–°–ª–∞–±–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è','–ú–∞–ª–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è','–£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è','–°–∏–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è','–ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π —à—Ç–æ—Ä–º','–í—Å—ë, –ø–æ–ª–Ω—ã–π –ø–∏–∑–¥–µ—Ü, –∑–∞—à–∫–∞–ª–∏–ª–æ!'];

		$date = (new DateTime($data['date']['local']))->format('l - d M');

		// $this->numDecor($data);

		$w= "<strong>–ü–æ–≥–æ–¥–∞ –Ω–∞ {$date} ({$data['date']['local']})</strong>
		{$data['description']['full']} " . $this->collectIcons($data['icon']) . "\n
		<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b>";

		//* –û—Ç–¥–µ–ª—è–µ–º –ø–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–≥–æ–¥—É
		if(!empty($data['temperature']['air']['max']))
		{
			$w .= "
			<b><u>–í–æ–∑–¥—É—Ö:</u></b>
			MAX {$data['temperature']['air']['max']['C']} ‚ÑÉ
			MIN {$data['temperature']['air']['min']['C']} ‚ÑÉ
			AVG {$data['temperature']['air']['avg']['C']} ‚ÑÉ
			<u>–í–æ–∑–¥—É—Ö –æ—â—É—â–∞–µ—Ç—Å—è:</u>
			MAX {$data['temperature']['comfort']['max']['C']} ‚ÑÉ
			MIN {$data['temperature']['comfort']['min']['C']} ‚ÑÉ\n
			<u>–í–æ–¥–∞:</u>
			MAX {$data['temperature']['water']['max']['C']} ‚ÑÉ
			MIN {$data['temperature']['water']['min']['C']} ‚ÑÉ

			<u>–í–µ—Ç–µ—Ä</u>
			MAX {$wind[$data['wind']['direction']['max']['scale_8']]} - {$data['wind']['speed']['max']['m_s']} –º/—Å
			MIN {$wind[$data['wind']['direction']['min']['scale_8']]} - {$data['wind']['speed']['min']['m_s']} –º/—Å

			<u>–î–∞–≤–ª–µ–Ω–∏–µ</u>
			MAX {$data['pressure']['mm_hg_atm']['max']} –º–º —Ä—Ç.—Å—Ç.
			MIN {$data['pressure']['mm_hg_atm']['min']} –º–º —Ä—Ç.—Å—Ç.";
		}
		//* –æ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π
		else
		{
			$w .= "
			–í–æ–∑–¥—É—Ö: {$data['temperature']['air']['C']} ‚ÑÉ
			–í–æ–∑–¥—É—Ö –æ—â—É—â–∞–µ—Ç—Å—è: {$data['temperature']['comfort']['C']} ‚ÑÉ

			–í–æ–¥–∞: {$data['temperature']['water']['C']} ‚ÑÉ

			<b>–í–µ—Ç–µ—Ä</b> - {$wind[$data['wind']['direction']['scale_8']]} - {$data['wind']['speed']['m_s']} –º/—Å

			<b>–î–∞–≤–ª–µ–Ω–∏–µ</b> - {$data['pressure']['mm_hg_atm']} –º–º —Ä—Ç.—Å—Ç.";

		}

		$w .= "\n
		<b>–û—Å–∞–¥–∫–∏</b> - {$precipitation['intensity'][$data['precipitation']['intensity']]} {$precipitation['type'][$data['precipitation']['type']]}
		({$data['precipitation']['type']} –º–º)

		<b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è</b> - {$gm[$data['gm']]}
		<a href='{$this->urlDIR}/gismeteo-newicons/{$data['icon']}.png' title='www.gismeteo.ru'>&#8205;</a>
		www.gismeteo.ru";

		return $w;
		// return $this->numDecor($w);
	}

	/**
	 ** –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã
	 */
	private function responseGMHandler(&$data= null)
	{
		//* –î–∞–Ω–Ω—ã–µ –∏–∑ methodSwitcher() –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ requestGM()
		$data = $data ?? $this->responseData['response'];

		tolog('$data[\'icon\'] = ' . $data['icon']);

		$this->apiRequest([
			'parse_mode' => 'html',
			'disable_web_page_preview' => false,
			'chat_id' => $this->user_id,
			'text' => $this->collectWeather($data)
		]);
	}

	private function numDecor(&$str)
	{
		/* $num = ['0','1','2','3','4','5','6','7','8','9'];
		$dec = ['ùüé','ùüè','ùüê','ùüë','ùüí','ùüì','ùüî','ùüï','ùüñ','ùüó'];

		array_walk_recursive($arr, function(&$i) use($num,$dec) {
			$i = str_replace($num, $dec, '<b>'. $i .'</b>');
		}); */

		tolog(__METHOD__.' ',null, [$arr]);

		return preg_replace("~(?<=[^&#])(\d+?)(?! [;])~", "<b>$1</b>", $str);
	}

} //* Gismeteo