<?php
require_once "UniConstruct.trait.php";

class GameTest extends CommonBot {
	use UniConstruct;

	const
		FOLDER = 'Game',
		BASE = self::FOLDER . '/base.json',
		//* Command list
		GAME = UniKffBot::GAME;

	protected
		$data;

	/**
	 * @param cmd - 'cmdName_opt1_opt2_...etc'
	 */
	public function __construct(UniKffBot &$UKB, ?string $cmd=null)
	{
		$this->setConstruct($UKB, $cmd)->init()->routerCmd()->saveData();


	} //* __construct


	private function init()
	{
		// $this->log->add('self::GAME=',null,[self::GAME]);

		if(!file_exists(self::FOLDER))
			mkdir(self::FOLDER, 0755);

		//* set data
		$this->data = file_exists(self::BASE)?
			json_decode(
				file_get_contents(self::BASE), 1
			):
			[];
		$this->data['change'] = 0;

			return $this;
	} //* init


	private function saveData()
	{
		// $this->log->add('self::GAME=',null,[self::GAME]);
		if(!$this->data['change']) return;
		unset($this->data['change']);

		file_put_contents(
			self::BASE,
			json_encode($this->data, JSON_UNESCAPED_UNICODE), LOCK_EX
		);

			return $this;
	} //* saveData


	private function routerCmd()
	{
		$o=null;
		$data = &$this->data['current draws'];

		switch ($this->cmd[0]) {
			case 'info':
				$o = [
					'text' => '–¢—É—Ç –±—É–¥–µ—Ç –Ω—É –æ–æ–æ–æ—á–µ–Ω—å –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è... –ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –µ—ë —Å–æ—Å—Ç–∞–≤–∏—Ç—å.',
					'reply_markup' => [
						"keyboard" => [
							[
								['text' => self::GAME['advanced']],
								['text' => self::GAME['help']],
								['text' => self::GAME['settings']],
							],
							[
								['text' => self::GAME['general']],
							],
				],],];
				break;

			case 'balance':
				$o = [
					'text' => '–£ –Ω–∞—Å - –∫–æ–º–º—É–Ω–∏–∑–º, —Ç–æ–≤–∞–≥–∏—Å—á–∏!!! –ö–∞–∫–∏–µ –¥–µ–Ω—å–≥–∏?',
				];
				break;

			case 'settings':
				$o = [
					'text' => '–ö–∞–∫–∏–µ –Ω—É–∂–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –ü–∏—à–∏—Ç–µ @korniloff75',
				];
				break;

			case 'advanced':
				$o = [
					'text' => '–ß—Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å? –ù—É–∂–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª? –ü–∏—à–∏—Ç–µ @korniloff75',
				];
				break;

			case 'help':
				$o = [
					'text' => "–ü–æ–º–æ–∂–µ–º –≤—Å–µ–º!\n–¢—É—Ç –±—É–¥—É—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.",
					'reply_markup' => [
						"inline_keyboard" => [
							[
								['text' => 'Support', 'url' => 'https://t.me/korniloff75'],
								['text' => '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', 'url' => 'https://t.me/korniloff75'],
							],
							[
								['text' => 'üí¨Community', 'url' => 'https://t.me/korniloff75'],
							],
						],
				],];
				break;

			//* –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
			case 'new draw':
				if(!empty($data))
				{
					$o = [
						'text' => '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à, –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—ã–≥—Ä–∞–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π.'
					];
				break;
				}

				$o = [
					'text' => '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.',
					'reply_markup' => [
						"inline_keyboard" => [
							[
								['text' => 1, 'callback_data' => '/GameTest/prizes_count__1'],
								['text' => 2, 'callback_data' => '/GameTest/prizes_count__2'],
								['text' => 3, 'callback_data' => '/GameTest/prizes_count__3'],
							],
				],],];
				break;

			case 'prizes_count':
				$this->data['change']++;
				$data = [
					'owner' => $this->cbn['from'],
					'prizes_count' => $this->cmd[1][0],
				];

				$o = [
					'text' => '–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω.',
					'reply_markup' => [
						"keyboard" => [
							[
								['text' => self::GAME['play draw']],
								['text' => self::GAME['show participates']],
							],
							[
								['text' => self::GAME['balance']],
								['text' => self::GAME['info']],
							],
							[
								['text' => self::GAME['general']],
							],
				],],];
				$this->addSelf = 1;
				break;

			case 'show participates':
				$ps = '';
				foreach($data['participants'] as $p)
				{
					$ps .= $this->showUsername($p);
				}
				$o = [
					'text' => "<u>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:</u> " . count($data['participants']) . " —á–µ–ª.\n\n$ps"
				];
				break;

			//* –†–æ–∑—ã–≥—Ä—ã—à
			case 'play draw':
				shuffle($data['participants']);
				$winners = []; $winStr = '';

				for($i=0; $i < $data['prizes_count']; $i++)
				{
					$winners[] = $data['participants'][$i];
					$winStr .= $this->showUsername($winners[$i]);
				}

				$o = [
					'text' => "<u>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</u>\n\n$winStr",
					'reply_markup' => [
						"keyboard" => [
							[
								['text' => self::GAME['general']],
							],
				],],];

				// unset($data);
				unset($data, $this->data['current draws']);
				$this->data['change']++;
				break;

			//* –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
			case 'participate':
				if(in_array($this->cbn['from'], $data['participants']))
				{
					$o = $this->showMainMenu([
						'text' => "–¢—ã —É–∂–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à. –ö–æ–Ω—á–∞–π —Å–µ—Ä–≤–µ—Ä –º—É—á–∞—Ç—å, –∞ —Ç–æ - –∑–∞–±–∞–Ω—é –Ω–∞—Ö!\n\n"
					]);
					break;
				}
				elseif(
					!empty($owner = $data['owner'])
				) {
					$this->data['change']++;
					$data['participants'][]= $this->cbn['from'];
					$count = count($data['participants']);

					$o = [
						'text' => "–£—á–∞—Å—Ç–Ω–∏–∫ " . $this->showUsername($this->cbn['from']) . " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç {$owner['first_name']}.\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {$count} —á–µ–ª."
					];
					$this->sendToOwner = 1;
				}
				else $o = [
					'text' => '–î–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç.',
					'reply_markup' => [
						"keyboard" => [
							[
								['text' => self::GAME['new draw']],
							],
							[
								['text' => self::GAME['balance']],
								['text' => self::GAME['info']],
							],
							[
								['text' => self::GAME['general']],
							],
				],],];
				break;

			default:
				$o = $this->showMainMenu();
				break;
		} //*switch

		if($o)
		{
			//* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
			if(
				isset($data['owner'])
				&& $this->chat_id === $data['owner']['id']
				&& empty($o['reply_markup']['inline_keyboard'])
			)
			{
				$o['reply_markup']['keyboard'] = array_merge_recursive($o['reply_markup']['keyboard'] ?? [], [[
					['text' => self::GAME['play draw']],
					['text' => self::GAME['show participates']],
				]]);
				$this->log->add(__METHOD__.' reply_markup=',null, [$o['reply_markup'],]);
			}

			if(!empty($o['reply_markup']['keyboard']))
			{
				$o['reply_markup'] += ["one_time_keyboard" => false, "resize_keyboard" => true, "selective" => true];
			}

			//*
			$this->apiRequest($o);

			//* –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
			if(!empty($this->addSelf))
			{
				$this->addSelf = null;
				$this->cmd[0] = 'participate';
				return $this->routerCmd();
			}

			//* –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
			if(!empty($this->sendToOwner) && $this->chat_id !== $data['owner']['id'])
			{
				$this->sendToOwner = null;
				$o['chat_id'] = $data['owner']['id'];
				$this->apiRequest($o);
			}
		}

		return $this;
	} //* routerCmd


	private function showUsername($user)
	{
		return "<b>{$user['first_name']}</b> @{$user['username']} ({$user['id']})\n";
	}

	// üí°

	private function showMainMenu($o=[])
	{
		$keyboard = [
			[
				['text' => self::GAME['new draw']],
			],
			[
				['text' => self::GAME['balance']],
				['text' => self::GAME['info']],
			],
		];

		if(isset($this->data['current draws']))
		{
			$keyboard[0][0] = ['text' => self::GAME['participate']];
		}

		$arr = [
			'text' => is_numeric(substr($this->chat_id,0,1))?
				'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∏–≥—Ä–æ–≤–æ–º –±–æ—Ç–µ. –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –û–Ω–æ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤–æ –≤—Å–µ—Ö –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.'
			:	"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –Ω–µ –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–∞–º–∏.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –ø–µ–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–∞–º –±–æ—Ç –ø–æ —Å—Å—ã–ª–∫–µ @UniKffBot",
			'reply_markup' => [
				"keyboard" => $keyboard,
			]
		];
		return array_merge_recursive($arr,$o);
	} //* showMainMenu

} //* GameTest
