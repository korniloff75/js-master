<h2>Условие</h2>

<div>
	<p>Существует два массива с числами разной длины. Требуется выбрать из первого массива все значения, ближайшие к значениям из второго массива. При этом значения второго массива, к которым осуществляется подбор, должны находиться внутри диапазона первого массива.<br></p>
	<p>Также среди найденных ближайших значений требуется вычислить наиболее приближённое значение.</p>
</div>


<h2>Решение</h2>

<button id="start" onclick="findInArr(a1)">Start</button>

<div class="center">
	<div>
		<div id="viz" style="border:3px solid red; display:inline-block; padding:5px;line-break: anywhere;"></div>
	</div>
	<div>
	</div>
</div>

<div id="prim">
	<script>
		'use strict';
		// *@arssmolin
		let a1= [
 340.32138333333336,
 340.421358,
 340.5213326666667,
 340.62130733333333,
 340.72128200000003,
 340.82125666666667,
 340.92123133333337,
 341.021206,
 341.1211806666667,
 341.22115533333334,
 341.32113000000004,
 341.4211046666667,
 341.5210793333334,
 341.621054,
 341.7210286666667,
 341.82100333333335,
 341.92097800000005,
 342.0209526666667,
 342.1209273333334,
 342.220902,
 342.32087666666666,
 342.42085133333336,
 342.520826,
 342.6208006666667,
 342.72077533333334,
 342.82075000000003,
 342.9207246666667,
 343.02069933333337,
 343.120674,
 343.2206486666667,
 343.32062333333334,
 343.42059800000004,
 343.5205726666667,
 343.6205473333334,
 343.720522,
 343.8204966666667,
 343.92047133333335,
 344.02044600000005,
 344.1204206666667,
 344.2203953333334,
 344.32037,
 344.42034466666667,
 344.52031933333336,
 344.620294,
 344.7202686666667,
 344.82024333333334,
 344.92021800000003,
 345.0201926666667,
 345.12016733333337,
 345.220142,
 345.3201166666667,
 345.42009133333335,
 345.52006600000004,
 345.6200406666667,
 345.7200153333334,
 345.81999,
 345.9199646666667,
 346.01993933333335,
 346.11991400000005,
 346.2198886666667,
 346.3198633333334,
 346.419838,
 346.51981266666667,
 346.61978733333336,
 346.719762,
 346.8197366666667,
 346.91971133333334,
 347.01968600000004,
 347.1196606666667,
 347.2196353333334,
 347.31961,
 347.4195846666667,
 347.51955933333335,
 347.61953400000004,
 347.7195086666667,
 347.8194833333334,
 347.919458,
 348.0194326666667,
 348.11940733333336,
 348.21938200000005,
 348.3193566666667,
 348.41933133333333,
 348.51930600000003,
 348.61928066666667,
 348.71925533333336,
 348.81923,
 348.9192046666667,
 349.01917933333334,
 349.11915400000004,
 349.2191286666667,
 349.3191033333334,
 349.419078,
 349.5190526666667,
 349.61902733333335,
 349.71900200000005,
 349.8189766666667,
 349.9189513333334,
 350.018926,
 350.1189006666667,
 350.21887533333336,
 350.31885,
 350.4188246666667,
 350.51879933333333,
 350.61877400000003,
 350.71874866666667,
 350.81872333333337,
 350.918698,
 351.0186726666667,
 351.11864733333334,
 351.21862200000004,
 351.3185966666667,
 351.4185713333334,
 351.518546,
 351.6185206666667,
 351.71849533333335,
 351.81847000000005,
 351.9184446666667,
 352.0184193333334,
 352.118394,
 352.2183686666667,
 352.2753725,
 352.37448775,
 352.473603,
 352.57271825,
 352.6718335,
 352.77094875,
 352.870064,
 352.96917925,
 353.0682945,
 353.16740975,
 353.266525,
 353.36564025,
 353.4647555,
 353.56387075,
 353.662986,
 353.76210125,
 353.8612165,
 353.96033175,
 354.059447,
 354.15856225,
 354.2576775,
 354.35679275,
 354.455908,
 354.55502325,
 354.6541385,
 354.75325375,
 354.852369,
 354.95148425,
 355.0505995,
 355.14971475,
 355.24883,
 355.34794525,
 355.4470605,
 355.54617575,
 355.645291,
 355.74440625,
 355.8435215,
 355.94263675,
 356.041752,
 356.14086725,
 356.2399825,
 356.33909775,
 356.438213,
 356.53732825,
 356.6364435,
 356.73555875,
 356.834674,
 356.93378925,
 357.0329045,
 357.13201975,
 357.231135,
 357.33025025,
 357.4293655,
 357.52848074999997,
 357.627596,
 357.72671125,
 357.8258265,
 357.92494175,
 358.02405699999997,
 358.12317225,
 358.2222875,
 358.32140275,
 358.420518,
 358.51963324999997,
 358.6187485,
 358.71786375,
 358.816979,
 358.91609425,
 359.01520949999997,
 359.11432475,
 359.21344,
 359.31255525,
 359.4116705,
 359.51078574999997,
 359.609901,
 359.70901625,
 359.8081315,
 359.90724675,
 0.006361999999967338,
 0.10547724999997854,
 0.20459249999998974,
 0.30370775000000094,
 0.40282300000001214,
 0.5019382499999665,
 0.6010534999999777,
 0.7001687499999889,
 0.7992840000000001,
 0.8983992500000113,
 0.9975144999999657,
 1.0966297499999769,
 1.195744999999988,
 1.2948602499999993,
 1.3939755000000105,
 1.4930907499999648,
 1.592205999999976,
 1.6913212499999872,
 1.7904364999999984,
 1.8895517500000096,
 1.988666999999964,
 2.087782249999975,
 2.1868974999999864,
 2.2860127499999976,
 2.385128000000009,
 2.484243249999963,
 2.5833584999999744,
 2.6824737499999856,
 2.7815889999999968,
 2.880704250000008,
 2.9798194999999623,
 3.0789347499999735,
 3.1780499999999847,
 3.277165249999996,
 3.376280500000007,
 3.4753957499999615,
 3.5745109999999727,
 3.673626249999984,
 3.772741499999995,
 3.8718567500000063,
 3.9709719999999606,
 4.070087249999972,
];


		function findInArr (arr) {
			console.clear();
			arr= arr || a1;
			let a2= [0,30,60,90,120,150,180,210,240,270,300,330,360],
			diff= [],
			res= [],
			// oldRes= localStorage.getItem('res'),
			// oldRes= eval(`[${localStorage.getItem('res')}]`),
			oldRes= JSON.parse(localStorage.getItem('res')) || [],
			tmp= [1e5];

		// a1= a1.sort((a,b)=>a>b);
		console.log('oldRes= ', oldRes);

		// if()

		a2.forEach((i, ind)=>{
			/* if(i<a1[0] || i>a1[a1.length-1]) {
				console.log(`${i} пропущен, поскольку находится за диапазоном допустимых значений`);
				return;
			} */

			a1.concat(oldRes).forEach(f=>{
				if(Math.abs(f-i) < tmp[0]) {
					tmp[0]= Math.abs(f-i);
					tmp[1]= f;
				};
				// console.info( f, i, tmp, Math.abs(f-i), Math.abs(f-i) < tmp[0]);
			});

			diff[ind]= tmp[0];
			res.push(tmp[1]);
			tmp= [1e5];
		});


		tmp.difMin= diff.reduce((acc, cur, ind)=>{
			// console.log('iter ', cur, acc);
			return (Math.abs(cur) < Math.abs(acc.val))? {ind:ind, val:cur}: acc;
		}, {ind:-1, val:1e5});

		tmp.resMin= res[tmp.difMin.ind];



		if(res.length !== res.filter(i=> oldRes.indexOf(i) > -1).length) {
			res= [...new Set(res.concat(oldRes))];
			console.info('Задан новый массив= ', res);
			localStorage.setItem('res', JSON.stringify(res));
		} else {
			res= [...new Set(res)];
		}

		console.info('Ближайшие числа= ', res);

		console.info('Самое близкое число= ', tmp.resMin);

		return {
			res: res,
			a2: a2,
			tmp:tmp
		}
		}
	</script>
</div>

<script>
	$('#start').on('click', e=>{
		let f= findInArr(a1);
		$('#viz').html(
		`<h4>Исходные данные:</h4>
		Массив 1 - ${a1}<br>
		Массив 2 - ${f.a2}<hr>
		<h4>Решение</h4>
		<h5>Ближайшие значения:</h5>
		${f.res}
		<h5>Наиболее приближённое значение:</h5>
		${f.tmp.resMin}`
	);
	})

</script>

<pre><code for="#prim" data-lib="native ES-6"></code></pre>