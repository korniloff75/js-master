<h2>Условие</h2>

<p>Напишите функцию, принимающую аргументом массив объектов и возвращающую объект, содержащий суммы всех одинаковых свойств объектов входящего массива.</p>


<h2>Решение</h2>
<div id="arr" style="border:3px solid red; display:inline-block; padding:5px;">
</div>

<script id="prim" type="text/javascript">
// *Суммирование одинаковых свойств
var a = [
{prop_1: 1, prop_2: 2, prop_3: 5},
{prop_1: 2, prop_2: 4},
{prop_1: 3, prop_2: 6, prop_3: 8},
{prop_1: 4, prop_2: 8, prop_4: 5}
];

// *1 вариант, низкоуровневое решение
function sumProps_1 (arr) {
	var out = {};
	arr.forEach(function(i) {
		for (var p in i) {
			if (i.hasOwnProperty(p)) {
				out[p] = out[p] || 0;
				out[p] += i[p];
			}
		}
	});
	return out;
}

// *2 вариант, высокоуровневое решение, ES-6
function sumProps_2 (arr) {
	return arr.reduce((acc,i)=>{
		Object.keys(i).forEach(p=>{
			acc[p] = acc[p] || 0;
			acc[p] += i[p];
		});

		return acc;
	}, {});
}

console.log(sumProps_1 (a), sumProps_2 (a));
</script>

<button class="button" onclick="arr.innerHTML = printObj(sumProps_1 (a));">Суммировать свойства 1</button>

<button class="button" onclick="arr.innerHTML = printObj(sumProps_2 (a));">Суммировать свойства 2</button>

<button class="button" onclick="arr.innerHTML = printObj(a);">Возврат</button>

<script>
	// Рекурсивный листинг объекта
	function printObj (obj) {
		var o='<br>{ ';
		for (var key in obj) {
			o += key + ' : ';
			if(obj[key] instanceof Object) {
				o += printObj(obj[key]) ;
				continue;
			}
			if (obj.hasOwnProperty(key)) {
				o += obj[key] + ', ';
			}
		}
		return o + ' }';
	}

	a.forEach(function(i) {
		arr.innerHTML += printObj(i) + '<br>';
	})
</script>


<h5>UPD 10.05.2020:</h5>

<div>
	<p></p>

По дельному совету Виталия из комментариев, я привёл также более современный способ решения этой задачи -- с использованием нативного метода из <i>ES-6</i> -- <b>Array.prototype.reduce</b><p></p>
</div>



<h3>Исходный код javascript</h3>
<pre><code for="#prim" data-lib="native ES-5/6"></code></pre>