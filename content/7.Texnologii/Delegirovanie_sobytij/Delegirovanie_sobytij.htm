<div>
	<p>В клиентском программировании часто встречается ситуация, когда требуется навесить обработчики событий на большое количество однотипных элементов. В качестве абстрактного примера рассмотрим блок с разноцветными дочерними блоками.</p>
  
	<p>Да, мы можем обработать событие на каждом дочернем блоке, и всё будет работать. Но мы не пойдем этим путём. Мы будем использовать приём программирования, называемый  <strong>делегированием событий</strong>, основной смысл которого заключается в перехвате события на общем родительском узле <i>DOM</i>. Поскольку в <i>javascript</i> событие является объектом и содержит в себе свойство <em>target</em>, мы можем определить <em>мишень</em> события, произошедшего на родительском элементе, то есть - его дочерний узел.</p>

	<p>В примере ниже ссылка на родительский элемент содержится в переменной <b>dt</b>.</p>
	<p>Попробуйте кликнуть по любому дочернему элементу и увидите сообщение с расшифровкой его цвета.</p>
</div>

<style type="text/css">
#delegateTarget {
	cursor: pointer;
	display: flex;
	flex-wrap: wrap;
	margin: auto;
	width: 100%;
  	max-width: 700px;
	height: auto;
}

#delegateTarget div{
	flex: 0 0 25%;
	box-sizing: border-box;
	transition: none;
	/* width: 30%; */
}
#delegateTarget div:hover{
	border: 3px solid #def;
}
#delegateTarget div::after {
	content: "";
	z-index: -1;
	display: block;
	padding-top: 100%;
}
</style>


<div class="center" id="delegateTarget" title="Определи цвет"></div>

<script>
	var dt= document.querySelector('#delegateTarget');

	function randColor(){
		let color= '';
		for (let i = 0; i < 3; i++) {
			color += 56 + Math.floor(Math.random() * 200);
			if(i<2) color += ',';
		}
		return `rgb(${color})`;
	}
	//

	for (let i = 0; i < 16; i++) {
		dt.innerHTML += `<div style="background:${randColor()}"><\/div>`;
	}
</script>

<script id="prim1">
	dt.onclick= e=>{
		let t= e.target;
		alert(t.style.backgroundColor);
	}
</script>

<h4>Код:</h4>
<!--  -->
<pre><code for="#prim1" data-lib="ES-6"></code></pre>



<p>И, для тех, для кого первый пример показался слишком абстрактным, простейший прикладной пример со стандартным списком, выводящим значение атрибута <em>name</em> при клике на любом из его элементов.</p>
<style type="text/css">
	#prim2 li {width: auto; cursor: pointer;}
</style>

<div id="prim2">
	<ul onclick="fn(event)">
	  <li name="one">один</li>
	  <li name="two">два</li>
	  <li name="three">три</li>
	  <li name="four">четыре</li>
	  <li name="five">пять</li>
	</ul>
	<script>
	function fn (e) {
		alert(e.target.getAttribute('name'));
		e.stopPropagation();
	}
	</script>
</div>


<h4>Код:</h4>
<!--  -->
<pre><code for="#prim2"></code></pre>